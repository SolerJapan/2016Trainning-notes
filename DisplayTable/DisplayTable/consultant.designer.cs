#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DisplayTable
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="consultant")]
	public partial class consultantDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertdivision(division instance);
    partial void Updatedivision(division instance);
    partial void Deletedivision(division instance);
    partial void Insertemployee(employee instance);
    partial void Updateemployee(employee instance);
    partial void Deleteemployee(employee instance);
    partial void Insertproject(project instance);
    partial void Updateproject(project instance);
    partial void Deleteproject(project instance);
    partial void Insertworkon(workon instance);
    partial void Updateworkon(workon instance);
    partial void Deleteworkon(workon instance);
    #endregion
		
		public consultantDataContext() : 
				base(global::DisplayTable.Properties.Settings.Default.consultantConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public consultantDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public consultantDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public consultantDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public consultantDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<division> divisions
		{
			get
			{
				return this.GetTable<division>();
			}
		}
		
		public System.Data.Linq.Table<employee> employees
		{
			get
			{
				return this.GetTable<employee>();
			}
		}
		
		public System.Data.Linq.Table<project> projects
		{
			get
			{
				return this.GetTable<project>();
			}
		}
		
		public System.Data.Linq.Table<workon> workons
		{
			get
			{
				return this.GetTable<workon>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.division")]
	public partial class division : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _did;
		
		private string _dname;
		
		private System.Nullable<int> _managerID;
		
		private EntitySet<employee> _employees;
		
		private EntitySet<project> _projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndidChanging(int value);
    partial void OndidChanged();
    partial void OndnameChanging(string value);
    partial void OndnameChanged();
    partial void OnmanagerIDChanging(System.Nullable<int> value);
    partial void OnmanagerIDChanged();
    #endregion
		
		public division()
		{
			this._employees = new EntitySet<employee>(new Action<employee>(this.attach_employees), new Action<employee>(this.detach_employees));
			this._projects = new EntitySet<project>(new Action<project>(this.attach_projects), new Action<project>(this.detach_projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_did", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int did
		{
			get
			{
				return this._did;
			}
			set
			{
				if ((this._did != value))
				{
					this.OndidChanging(value);
					this.SendPropertyChanging();
					this._did = value;
					this.SendPropertyChanged("did");
					this.OndidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dname", DbType="VarChar(25)")]
		public string dname
		{
			get
			{
				return this._dname;
			}
			set
			{
				if ((this._dname != value))
				{
					this.OndnameChanging(value);
					this.SendPropertyChanging();
					this._dname = value;
					this.SendPropertyChanged("dname");
					this.OndnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_managerID", DbType="Int")]
		public System.Nullable<int> managerID
		{
			get
			{
				return this._managerID;
			}
			set
			{
				if ((this._managerID != value))
				{
					this.OnmanagerIDChanging(value);
					this.SendPropertyChanging();
					this._managerID = value;
					this.SendPropertyChanged("managerID");
					this.OnmanagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="division_employee", Storage="_employees", ThisKey="did", OtherKey="did")]
		public EntitySet<employee> employees
		{
			get
			{
				return this._employees;
			}
			set
			{
				this._employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="division_project", Storage="_projects", ThisKey="did", OtherKey="did")]
		public EntitySet<project> projects
		{
			get
			{
				return this._projects;
			}
			set
			{
				this._projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_employees(employee entity)
		{
			this.SendPropertyChanging();
			entity.division = this;
		}
		
		private void detach_employees(employee entity)
		{
			this.SendPropertyChanging();
			entity.division = null;
		}
		
		private void attach_projects(project entity)
		{
			this.SendPropertyChanging();
			entity.division = this;
		}
		
		private void detach_projects(project entity)
		{
			this.SendPropertyChanging();
			entity.division = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.employee")]
	public partial class employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _empID;
		
		private string _name;
		
		private System.Nullable<double> _salary;
		
		private System.Nullable<int> _did;
		
		private EntitySet<workon> _workons;
		
		private EntitySet<workon> _workons1;
		
		private EntityRef<division> _division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnempIDChanging(int value);
    partial void OnempIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsalaryChanging(System.Nullable<double> value);
    partial void OnsalaryChanged();
    partial void OndidChanging(System.Nullable<int> value);
    partial void OndidChanged();
    #endregion
		
		public employee()
		{
			this._workons = new EntitySet<workon>(new Action<workon>(this.attach_workons), new Action<workon>(this.detach_workons));
			this._workons1 = new EntitySet<workon>(new Action<workon>(this.attach_workons1), new Action<workon>(this.detach_workons1));
			this._division = default(EntityRef<division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int empID
		{
			get
			{
				return this._empID;
			}
			set
			{
				if ((this._empID != value))
				{
					this.OnempIDChanging(value);
					this.SendPropertyChanging();
					this._empID = value;
					this.SendPropertyChanged("empID");
					this.OnempIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(30)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Float")]
		public System.Nullable<double> salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_did", DbType="Int")]
		public System.Nullable<int> did
		{
			get
			{
				return this._did;
			}
			set
			{
				if ((this._did != value))
				{
					if (this._division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndidChanging(value);
					this.SendPropertyChanging();
					this._did = value;
					this.SendPropertyChanged("did");
					this.OndidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_workon", Storage="_workons", ThisKey="empID", OtherKey="empID")]
		public EntitySet<workon> workons
		{
			get
			{
				return this._workons;
			}
			set
			{
				this._workons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_workon1", Storage="_workons1", ThisKey="empID", OtherKey="empID")]
		public EntitySet<workon> workons1
		{
			get
			{
				return this._workons1;
			}
			set
			{
				this._workons1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="division_employee", Storage="_division", ThisKey="did", OtherKey="did", IsForeignKey=true)]
		public division division
		{
			get
			{
				return this._division.Entity;
			}
			set
			{
				division previousValue = this._division.Entity;
				if (((previousValue != value) 
							|| (this._division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._division.Entity = null;
						previousValue.employees.Remove(this);
					}
					this._division.Entity = value;
					if ((value != null))
					{
						value.employees.Add(this);
						this._did = value.did;
					}
					else
					{
						this._did = default(Nullable<int>);
					}
					this.SendPropertyChanged("division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_workons(workon entity)
		{
			this.SendPropertyChanging();
			entity.employee = this;
		}
		
		private void detach_workons(workon entity)
		{
			this.SendPropertyChanging();
			entity.employee = null;
		}
		
		private void attach_workons1(workon entity)
		{
			this.SendPropertyChanging();
			entity.employee1 = this;
		}
		
		private void detach_workons1(workon entity)
		{
			this.SendPropertyChanging();
			entity.employee1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.project")]
	public partial class project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pid;
		
		private string _pname;
		
		private System.Nullable<double> _budget;
		
		private System.Nullable<int> _did;
		
		private EntitySet<workon> _workons;
		
		private EntitySet<workon> _workons1;
		
		private EntityRef<division> _division;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpidChanging(int value);
    partial void OnpidChanged();
    partial void OnpnameChanging(string value);
    partial void OnpnameChanged();
    partial void OnbudgetChanging(System.Nullable<double> value);
    partial void OnbudgetChanged();
    partial void OndidChanging(System.Nullable<int> value);
    partial void OndidChanged();
    #endregion
		
		public project()
		{
			this._workons = new EntitySet<workon>(new Action<workon>(this.attach_workons), new Action<workon>(this.detach_workons));
			this._workons1 = new EntitySet<workon>(new Action<workon>(this.attach_workons1), new Action<workon>(this.detach_workons1));
			this._division = default(EntityRef<division>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pid
		{
			get
			{
				return this._pid;
			}
			set
			{
				if ((this._pid != value))
				{
					this.OnpidChanging(value);
					this.SendPropertyChanging();
					this._pid = value;
					this.SendPropertyChanged("pid");
					this.OnpidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pname", DbType="VarChar(25)")]
		public string pname
		{
			get
			{
				return this._pname;
			}
			set
			{
				if ((this._pname != value))
				{
					this.OnpnameChanging(value);
					this.SendPropertyChanging();
					this._pname = value;
					this.SendPropertyChanged("pname");
					this.OnpnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_budget", DbType="Float")]
		public System.Nullable<double> budget
		{
			get
			{
				return this._budget;
			}
			set
			{
				if ((this._budget != value))
				{
					this.OnbudgetChanging(value);
					this.SendPropertyChanging();
					this._budget = value;
					this.SendPropertyChanged("budget");
					this.OnbudgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_did", DbType="Int")]
		public System.Nullable<int> did
		{
			get
			{
				return this._did;
			}
			set
			{
				if ((this._did != value))
				{
					if (this._division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndidChanging(value);
					this.SendPropertyChanging();
					this._did = value;
					this.SendPropertyChanged("did");
					this.OndidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="project_workon", Storage="_workons", ThisKey="pid", OtherKey="pid")]
		public EntitySet<workon> workons
		{
			get
			{
				return this._workons;
			}
			set
			{
				this._workons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="project_workon1", Storage="_workons1", ThisKey="pid", OtherKey="pid")]
		public EntitySet<workon> workons1
		{
			get
			{
				return this._workons1;
			}
			set
			{
				this._workons1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="division_project", Storage="_division", ThisKey="did", OtherKey="did", IsForeignKey=true)]
		public division division
		{
			get
			{
				return this._division.Entity;
			}
			set
			{
				division previousValue = this._division.Entity;
				if (((previousValue != value) 
							|| (this._division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._division.Entity = null;
						previousValue.projects.Remove(this);
					}
					this._division.Entity = value;
					if ((value != null))
					{
						value.projects.Add(this);
						this._did = value.did;
					}
					else
					{
						this._did = default(Nullable<int>);
					}
					this.SendPropertyChanged("division");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_workons(workon entity)
		{
			this.SendPropertyChanging();
			entity.project = this;
		}
		
		private void detach_workons(workon entity)
		{
			this.SendPropertyChanging();
			entity.project = null;
		}
		
		private void attach_workons1(workon entity)
		{
			this.SendPropertyChanging();
			entity.project1 = this;
		}
		
		private void detach_workons1(workon entity)
		{
			this.SendPropertyChanging();
			entity.project1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.workon")]
	public partial class workon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pid;
		
		private int _empID;
		
		private System.Nullable<int> _hours;
		
		private EntityRef<employee> _employee;
		
		private EntityRef<project> _project;
		
		private EntityRef<employee> _employee1;
		
		private EntityRef<project> _project1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpidChanging(int value);
    partial void OnpidChanged();
    partial void OnempIDChanging(int value);
    partial void OnempIDChanged();
    partial void OnhoursChanging(System.Nullable<int> value);
    partial void OnhoursChanged();
    #endregion
		
		public workon()
		{
			this._employee = default(EntityRef<employee>);
			this._project = default(EntityRef<project>);
			this._employee1 = default(EntityRef<employee>);
			this._project1 = default(EntityRef<project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pid
		{
			get
			{
				return this._pid;
			}
			set
			{
				if ((this._pid != value))
				{
					if ((this._project.HasLoadedOrAssignedValue || this._project1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpidChanging(value);
					this.SendPropertyChanging();
					this._pid = value;
					this.SendPropertyChanged("pid");
					this.OnpidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_empID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int empID
		{
			get
			{
				return this._empID;
			}
			set
			{
				if ((this._empID != value))
				{
					if ((this._employee.HasLoadedOrAssignedValue || this._employee1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnempIDChanging(value);
					this.SendPropertyChanging();
					this._empID = value;
					this.SendPropertyChanged("empID");
					this.OnempIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hours", DbType="Int")]
		public System.Nullable<int> hours
		{
			get
			{
				return this._hours;
			}
			set
			{
				if ((this._hours != value))
				{
					this.OnhoursChanging(value);
					this.SendPropertyChanging();
					this._hours = value;
					this.SendPropertyChanged("hours");
					this.OnhoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_workon", Storage="_employee", ThisKey="empID", OtherKey="empID", IsForeignKey=true)]
		public employee employee
		{
			get
			{
				return this._employee.Entity;
			}
			set
			{
				employee previousValue = this._employee.Entity;
				if (((previousValue != value) 
							|| (this._employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee.Entity = null;
						previousValue.workons.Remove(this);
					}
					this._employee.Entity = value;
					if ((value != null))
					{
						value.workons.Add(this);
						this._empID = value.empID;
					}
					else
					{
						this._empID = default(int);
					}
					this.SendPropertyChanged("employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="project_workon", Storage="_project", ThisKey="pid", OtherKey="pid", IsForeignKey=true)]
		public project project
		{
			get
			{
				return this._project.Entity;
			}
			set
			{
				project previousValue = this._project.Entity;
				if (((previousValue != value) 
							|| (this._project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._project.Entity = null;
						previousValue.workons.Remove(this);
					}
					this._project.Entity = value;
					if ((value != null))
					{
						value.workons.Add(this);
						this._pid = value.pid;
					}
					else
					{
						this._pid = default(int);
					}
					this.SendPropertyChanged("project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_workon1", Storage="_employee1", ThisKey="empID", OtherKey="empID", IsForeignKey=true)]
		public employee employee1
		{
			get
			{
				return this._employee1.Entity;
			}
			set
			{
				employee previousValue = this._employee1.Entity;
				if (((previousValue != value) 
							|| (this._employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee1.Entity = null;
						previousValue.workons1.Remove(this);
					}
					this._employee1.Entity = value;
					if ((value != null))
					{
						value.workons1.Add(this);
						this._empID = value.empID;
					}
					else
					{
						this._empID = default(int);
					}
					this.SendPropertyChanged("employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="project_workon1", Storage="_project1", ThisKey="pid", OtherKey="pid", IsForeignKey=true)]
		public project project1
		{
			get
			{
				return this._project1.Entity;
			}
			set
			{
				project previousValue = this._project1.Entity;
				if (((previousValue != value) 
							|| (this._project1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._project1.Entity = null;
						previousValue.workons1.Remove(this);
					}
					this._project1.Entity = value;
					if ((value != null))
					{
						value.workons1.Add(this);
						this._pid = value.pid;
					}
					else
					{
						this._pid = default(int);
					}
					this.SendPropertyChanged("project1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
